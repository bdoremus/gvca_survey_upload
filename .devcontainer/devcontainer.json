{
    // devcontainer json reference: https://containers.dev/implementors/json_reference/
    // universal image here: https://github.com/devcontainers/images/tree/main/src/universal/.devcontainer
    // github codespaces don't charge for storage for image assets based on the universal image
    "build": {
        "dockerfile": "./Dockerfile",
        "context": ".."
    },
    // features repo which has help and options for each feature: https://github.com/devcontainers/features
    "features": {
        //    "ghcr.io/devcontainers/features/desktop-lite": {
        //        "version": "latest"
        //    },
        //     "ghcr.io/devcontainers/features/common-utils:2": {
        //         "username": "codespace",
        //         "userUid": "1000",
        //         "userGid": "1000"
        //     },
        //     "ghcr.io/devcontainers/features/dotnet:2": {
        //         "version": "8.0",
        //         "dotnetRuntimeVersions": "7.0",
        //         "aspNetCoreRuntimeVersions": "7.0"
        //     },
        //     "ghcr.io/devcontainers/features/hugo:1": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/node:1": {
        //         "version": "20",
        //         "additionalVersions": "18"
        //     },
        //     //"./local-features/nvs": "latest", //seems to be broken...
        // "ghcr.io/devcontainers/features/python:1": {
        //         "version": "3.12.1",
        //         "additionalVersions": "3.11.9",
        //         "installJupyterlab": "true",
        //         "configureJupyterlabAllowOrigin": "*",
        //         "useOryxIfAvailable": "false",
        //    "installPath": "/opt/conda",
        //    "toolsToInstall": [
        //        "autopep8",
        //        "black",
        //        "flake8",
        //        "pycodestyle",
        //        "pydocstyle",
        //        "pylint",
        //        "yapf",
        //        "ipython",
        //        "ipdb",
        //        "mypy",
        //        "pytest",
        //    ],
        //  },
        //    "ghcr.io/mamba-org/devcontainer-features/micromamba:1": {
        //        "channels": "conda-forge",
        //        //"packages": "black, pylint, ipython, ipdb, ipykernel, mypy, mock, pytest, pyyaml, yamllint, yq, shyaml"
        //        "envFile": "./environment.yml"
        //      },
        //     "ghcr.io/rocker-org/devcontainer-features/miniforge:2": {},
        //     "./local-features/machine-learning-packages": "latest",
        //     "ghcr.io/devcontainers/features/php:1": {
        //         "version": "8.3.0",
        //         "additionalVersions": "8.2.13",
        //         "installComposer": "true"
        //     },
        //     "ghcr.io/devcontainers/features/conda:1": {
        //         "version": "latest",
        //         "addCondaForge": "true"
        //     },
        //     "ghcr.io/itsmechlark/features/postgresql:1" {},
        //     "ghcr.io/devcontainers/features/ruby:1": {
        //         "version": "3.3.4",
        //         "additionalVersions": "3.3.2"
        //     },
        //     "ghcr.io/devcontainers/features/java:1": {
        //         "version": "21",
        //         "additionalVersions": "17",
        //         "installGradle": "true",
        //         "installMaven": "true"
        //     },
        //     "ghcr.io/devcontainers/features/sshd:1": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/git:1": {
        //         "version": "latest",
        //         "ppa": "false"
        //     },
        //     "ghcr.io/devcontainers/features/git-lfs:1": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/github-cli:1": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/docker-in-docker:2": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/kubectl-helm-minikube:1": {
        //         "version": "latest"
        //     },
        //     "ghcr.io/devcontainers/features/go:1": {
        //         "version": "latest"
        //     },
        //     "./local-features/jekyll": "latest",
        //     "ghcr.io/devcontainers/features/oryx:1": "latest",
        //     "./local-features/setup-user": "latest",
        //     "./local-features/patch-python": {},
        //     "./local-features/patch-conda": {}
    },
    // "overrideFeatureInstallOrder": [
    //     "ghcr.io/devcontainers/features/common-utils",
    //     "ghcr.io/devcontainers/features/git",
    //     "ghcr.io/devcontainers/features/dotnet",
    //     "ghcr.io/devcontainers/features/hugo",
    //     "ghcr.io/devcontainers/features/node",
    //     "./local-features/nvs",
    //     "ghcr.io/devcontainers/features/conda",
    //     "./local-features/patch-conda",
    //     "ghcr.io/devcontainers/features/python",
    //     "./local-features/patch-python",
    //     "./local-features/machine-learning-packages",
    //     "ghcr.io/rocker-org/devcontainer-features/miniforge:2",
    //     "ghcr.io/devcontainers/features/php",
    //     "ghcr.io/devcontainers/features/ruby",
    //     "ghcr.io/devcontainers/features/java",
    //     "ghcr.io/devcontainers/features/sshd",
    //     "ghcr.io/devcontainers/features/git-lfs",
    //     "ghcr.io/devcontainers/features/github-cli",
    //     "ghcr.io/devcontainers/features/docker-in-docker",
    //     "ghcr.io/devcontainers/features/desktop-lite",
    //     "ghcr.io/devcontainers/features/kubectl-helm-minikube",
    //     "ghcr.io/devcontainers/features/go",
    //     "./local-features/jekyll",
    //     "ghcr.io/devcontainers/features/oryx",
    //     "./local-features/setup-user"
    // ],
    // "remoteUser": "codespace",
    // "containerUser": "codespace",
    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    "forwardPorts": [
        6080, // port for accessing fluxbox desktop
        8888, // port for accessing jupyter server
    ],
    // Use 'portsAttributes' to set default properties for specific forwarded ports.
    // More info: https://containers.dev/implementors/json_reference/#port-attributes
    // "portsAttributes": {
    // 	"9000": {
    //		"label": "Hello Remote World",
    //		"onAutoForward": "notify"
    //	}
    // },
    // Use 'postCreateCommand' to run commands after the container is created.
    // "postCreateCommand": "chmod +x ./.devcontainer/developer_tools.sh && bash -i ./.devcontainer/developer_tools.sh",
    "postCreateCommand": "chmod +x ./.devcontainer/post_create_container.sh && bash -i ./.devcontainer/post_create_container.sh && chmod +x ./post_create_project.sh && bash -i ./post_create_project.sh",
    // Configure tool-specific properties.
    "customizations": {
        // Configure properties specific to Codespaces.
        "codespaces": {
            // Disable automatic configuration of the container by codespaces automation
            //    "disableAutomaticConfiguration": true,
            // grant access to the following repositories
            // will still work if user doesn't have permission to grant here
            "repositories": {
                // personal dotfiles repo -- not needed if dotfiles sync is turned on
                "broander/dotfiles": {
                    "permissions": "write-all"
                },
                // to allow pushing of improvements back to template repo
                "broander/standard-dev-container": {
                    "permissions": "write-all"
                },
            }
        },
        // Configure properties specific to VS Code.
        "vscode": {
            // Set *default* container specific settings.json values on container create.
            "settings": {
                // "go.toolsManagement.checkForUpdates": "local",
                // "go.useLanguageServer": true,
                // "go.gopath": "/go",
                "python.defaultInterpreterPath": "/opt/conda/bin/python",
                // "jupyter.kernels.filter": [
                //     {
                //         "path": "/opt/conda/bin/python",
                //         "type": "pythonEnvironment"
                //     },
                //     {
                //         "path": "/usr/local/python/current/bin/python3",
                //         "type": "pythonEnvironment"
                //     },
                //     {
                //         "path": "/usr/local/python/current/bin/python",
                //         "type": "pythonEnvironment"
                //     },
                //     {
                //         "path": "/usr/bin/python3",
                //         "type": "pythonEnvironment"
                //     },
                //     {
                //         "path": "/bin/python3",
                //         "type": "pythonEnvironment"
                //     }
                // ],
                "lldb.executable": "/usr/bin/lldb",
                "editor.formatOnSave": true,
                "python.formatting.blackArgs": [
                    "--line-length",
                    "79"
                ],
                "files.insertFinalNewline": true,
                "files.trimFinalNewlines": true,
                "editor.rulers": [
                    80
                ],
                "python.testing.pytestEnabled": true,
                "[html]": {
                    "editor.tabSize": 2,
                },
                "[javascript]": {
                    "editor.defaultFormatter": "esbenp.prettier-vscode",
                },
                "[typescript]": {
                    "editor.defaultFormatter": "esbenp.prettier-vscode",
                },
                "[python]": {
                    "editor.tabSize": 4,
                    "editor.formatOnType": true,
                    "editor.defaultFormatter": "ms-python.black-formatter",
                },
            },
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "GitHub.vscode-pull-request-github",
                "ms-python.python",
                "ms-python.vscode-pylance",
                "ms-python.pylint",
                "ms-python.flake8",
                "ms-python.mypy-type-checker",
                "ms-python.black-formatter",
                "ms-python.autopep8",
                "ms-python.black-formatter",
                "ms-python.isort",
                "eeyore.yapf",
                "jaydenlin.ctags-support",
                "donjayamanne.git-extension-pack",
                "donjayamanne.githistory",
                "redhat.vscode-xml",
                "redhat.vscode-yaml",
                "ms-vscode.remote-repositories",
                "ms-mssql.sql-bindings-vscode",
                "ms-mssql.sql-database-projects-vscode",
                "ms-mssql.mssql",
                "foxundermoon.shell-format",
                "shakram02.bash-beautify",
                "timonwong.shellcheck",
                "ZainChen.json",
                "VisualStudioExptTeam.vscodeintellicode",
            ]
        }
    }
}
